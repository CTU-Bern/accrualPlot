[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Lukas Bütikofer, Alan G Haynes Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/accrualPlot.html","id":"the-accrual_df","dir":"Articles","previous_headings":"","what":"The accrual_df","title":"accrualPlot","text":"work accrualPlot, need data, specifically dates , optionally, site identifiers. ’s data use following examples. accrual_dfs simply dataframes number participants day participants recruited (site) began recruiting.","code":"data(accrualdemo) head(accrualdemo) #>           date   site #> 24  2020-07-09 Site 1 #> 87  2020-07-14 Site 1 #> 126 2020-07-14 Site 1 #> 193 2020-07-14 Site 1 #> 139 2020-07-16 Site 1 #> 248 2020-07-19 Site 1"},{"path":"/articles/accrualPlot.html","id":"monocentric-trials","dir":"Articles","previous_headings":"The accrual_df","what":"Monocentric trials","title":"accrualPlot","text":"Monocentric trials obviously single site, need x object just created. can pass accrual_create_df function. case, accrual_df single data frame.","code":"df <- accrual_create_df(accrualdemo$date) print(df, head = TRUE) #> 250 participants recruited between 2020-07-09 and 2020-10-09  #>         Date Freq Cumulative #> 1 2020-07-09    0          0 #> 2 2020-07-09    1          1 #> 3 2020-07-14    3          4 #> 4 2020-07-16    1          5 #> 5 2020-07-19    1          6 #> 6 2020-07-20    1          7"},{"path":"/articles/accrualPlot.html","id":"multicentric-trials","dir":"Articles","previous_headings":"The accrual_df","what":"Multicentric trials","title":"accrualPlot","text":"multicentric trials, also pass site identifier accrual_create_df argument. case, accrual_df list dataframes, one site overall.","code":"df2 <- accrual_create_df(accrualdemo$date, by = accrualdemo$site) print(df2, head = TRUE) #> Site 1: #> 141 participants recruited between 2020-07-09 and 2020-10-09  #>         Date Freq Cumulative #> 1 2020-07-09    0          0 #> 2 2020-07-09    1          1 #> 3 2020-07-14    3          4 #> 4 2020-07-16    1          5 #> 5 2020-07-19    1          6 #> 6 2020-07-21    1          7 #>  #> Site 2: #> 88 participants recruited between 2020-07-20 and 2020-10-09  #>         Date Freq Cumulative #> 1 2020-07-20    0          0 #> 2 2020-07-20    1          1 #> 3 2020-07-21    1          2 #> 4 2020-07-22    1          3 #> 5 2020-07-23    1          4 #> 6 2020-07-26    1          5 #>  #> Site 3: #> 21 participants recruited between 2020-09-04 and 2020-10-09  #>         Date Freq Cumulative #> 1 2020-09-04    0          0 #> 2 2020-09-04    1          1 #> 3 2020-09-05    1          2 #> 4 2020-09-07    2          4 #> 5 2020-09-12    1          5 #> 6 2020-09-13    1          6 #>  #> Overall: #> 250 participants recruited between 2020-07-09 and 2020-10-09  #>         Date Freq Cumulative #> 1 2020-07-09    0          0 #> 2 2020-07-09    1          1 #> 3 2020-07-14    3          4 #> 4 2020-07-16    1          5 #> 5 2020-07-19    1          6 #> 6 2020-07-20    1          7"},{"path":"/articles/accrualPlot.html","id":"start-and-end-dates","dir":"Articles","previous_headings":"The accrual_df","what":"Start and end dates","title":"accrualPlot","text":"default, start end dates defined based dates pass accrual_create_df. can override via start_date current_date arguments. useful particularly slow recruiting trials (particularly strict inclusion criteria). example, fictitious example trial might started recruiting 1st November. adding information, modify output multicentric trials different sites started recruiting different times, can pass vector start_date","code":"df3 <- accrual_create_df(accrualdemo$date, start_date = as.Date(\"2020-07-08\")) start_date<-as.Date(c(\"2020-07-09\",\"2020-07-09\",\"2020-08-01\")) names(start_date)<-c(\"Site 1\",\"Site 2\",\"Site 3\") df4 <- accrual_create_df(accrualdemo$date, by = accrualdemo$site, start_date = start_date)"},{"path":"/articles/accrualPlot.html","id":"accrual-plots","dir":"Articles","previous_headings":"","what":"Accrual plots","title":"accrualPlot","text":"accrualPlot three flavours plots: * Cumulative * Absolute * Prediction supplies base graphics well ggplot2 graphics implementations (allowing easier modification).","code":""},{"path":"/articles/accrualPlot.html","id":"cumulative-plots","dir":"Articles","previous_headings":"Accrual plots","what":"Cumulative plots","title":"accrualPlot","text":"Cumulative plots show standard step function number participants recruited given point time. plots produced via plot method (wrapper internal function accrual_plot_cum)  ggplot2 graphics, use engine option:","code":"par(mfrow = c(1, 3)) plot(df) plot(df2) plot(df4) library(patchwork) library(ggplot2) p1 <- plot(df, engine = \"ggplot\") p2 <- plot(df2, engine = \"ggplot\") +     theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),          axis.title.x = element_blank()) p3 <- plot(df4, engine = \"ggplot\") +   labs(col = \"Site\") +   theme_classic() +   theme(legend.position = c(.35,.9),      legend.key.height = unit(2, \"mm\"),          legend.text=element_text(size=8),          legend.title=element_blank(),      axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),          axis.title.x = element_blank()) #> Warning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2 #> 3.5.0. #> ℹ Please use the `legend.position.inside` argument of `theme()` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. p1 + p2 + p3"},{"path":"/articles/accrualPlot.html","id":"absolute-recruitment","dir":"Articles","previous_headings":"Accrual plots","what":"Absolute recruitment","title":"accrualPlot","text":"Recruitment plots per unit time can obtained via absolute method (specify = \"absolute\" plot)  Options unit year, month, week day. multiple sites exist, different sites indicated different colours stacked bars.  might desirable panels site. easy ggplot implementation. variable use case site, constructed appropriate plot function.","code":"par(mfrow = c(1, 3)) plot(df, which = \"abs\", unit = \"week\") plot(df2, which = \"abs\", unit = \"week\", legend.list=list(x=\"topleft\"), xlabsel=seq(1,20,by=2)) plot(df4, which = \"abs\", unit = \"month\",legend.list=list(x=\"topleft\")) p1 <- plot(df, which = \"abs\", unit = \"week\", engine = \"ggplot\") p2 <- plot(df2, which = \"abs\", unit = \"week\", engine = \"ggplot\") +      theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),          axis.title.x = element_blank()) p3 <- plot(df4, which = \"abs\", unit = \"month\", engine = \"ggplot\") +   labs(fill = \"Site\") +   theme_classic() +   theme(legend.position = c(0.01,0.9),      legend.justification = \"left\",      legend.key.height = unit(2, \"mm\"),      legend.key.width = unit(2, \"mm\"),          legend.title=element_blank(),      axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),          axis.title.x = element_blank()) p1 + p2 + p3 plot(df2, which = \"abs\", unit = \"week\", engine = \"ggplot\") + facet_wrap(~site)"},{"path":[]},{"path":"/articles/accrualPlot.html","id":"date-at-which-a-target-sample-size-is-reached","dir":"Articles","previous_headings":"Accrual plots","what":"Date at which a target sample size is reached","title":"accrualPlot","text":"order predict time point certain number participants recruited (estimating study complete). want recruit total 300 participants, can put target option.  can also include site-specific targets:  ggplot2.  second ggplot2 example , specify different targets site, plus study-level target. syntax base graphics. ’s strictly necessary use plot figures. plot wrapper selects one 6 underlying functions depending value engine arguments. underlying functions base graphics accrual_plot_cum cumulative plots, accrual_plot_abs absolute values, accrual_plot_predict prediction plots. ggplot equivalents just prepend names gg_, .e. gg_accrual_plot_cum, gg_accrual_plot_abs gg_accrual_plot_predict. clarity, might desirable use instead, e.g.","code":"par(mfrow = c(1, 3)) plot(df, which = \"predict\", target = 300, cex_prediction=0.9) plot(df2, which = \"predict\", target = 300, cex_prediction=0.9) plot(df4, which = \"predict\", target = 300, cex_prediction=0.9,  center_legend=\"strip\") plot(df4, which = \"predict\", target=c(\"Site 1\"=160,\"Site 2\"=100,\"Site 3\"=40,\"Overall\"=300),      show_center=FALSE) p1 <- plot(df, which = \"predict\", target = 300, engine = \"ggplot2\") +   theme(plot.title.position = \"plot\") p2 <- plot(df2, which = \"predict\", target=c(\"Site 1\"=160,\"Site 2\"=100,\"Site 3\"=40,\"Overall\"=300),   engine = \"ggplot2\") +   labs(col = NULL) +   theme_classic() +   theme(legend.position = c(.025,.9),         legend.justification = \"left\",         legend.key.height = unit(2, \"mm\"),         legend.key.width = unit(2, \"mm\"),         legend.background = element_rect(fill = NA),         axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),         axis.title.x = element_blank()) p1 + p2 #> Warning in geom_point(aes(x = edate, y = targetm), col = col.pred, pch = pch.pred): All aesthetics have length 1, but the data has 79 rows. #> ℹ Please consider using `annotate()` or provide this layer with data containing #>   a single row. gg_accrual_plot_predict(df2, target=c(\"Site 1\"=160,\"Site 2\"=100,\"Site 3\"=40,\"Overall\"=300))"},{"path":"/articles/accrualPlot.html","id":"sample-size-at-a-specific-time-point","dir":"Articles","previous_headings":"Accrual plots","what":"Sample size at a specific time point","title":"accrualPlot","text":"also possible predict expected sample size specific time point. want know many patients recruited end year, can put date target option.  second example get site-specific predicions using target vector (date sites). Please note site-specific estimates necessarily sum overall derived separate models.","code":"par(mfrow = c(1, 2)) plot(df4, which = \"predict\", target = as.Date(\"2020-12-31\"), cex_prediction=0.9,  center_legend=\"strip\") target<-rep(as.Date(\"2020-12-31\"),4) names(target)<-c(\"Site 1\",\"Site 2\",\"Site 3\",\"Overall\") plot(df4, which = \"predict\", target=target,show_center=FALSE)"},{"path":"/articles/accrualPlot.html","id":"recruitment-tables","dir":"Articles","previous_headings":"","what":"Recruitment tables","title":"accrualPlot","text":"Tables recruitment can also generated using accrualPlot, via summary method. absolute recruitment , unit time can specified.","code":"# accrual_table(df)  summary(df, unit = \"day\")  #>             start_date          time                    n #> 1 First participant in Days accruing Participants accrued #> 2            09Jul2020            92                  250 #>                     rate #> 1 Accrual rate (per day) #> 2                   2.72 summary(df2, unit = \"day\")  #>      name           start_date          time                    n #> 1  Center First participant in Days accruing Participants accrued #> 2  Site 1            09Jul2020            92                  141 #> 3  Site 2            20Jul2020            81                   88 #> 4  Site 3            04Sep2020            35                   21 #> 5 Overall            09Jul2020            92                  250 #>                     rate #> 1 Accrual rate (per day) #> 2                   1.53 #> 3                   1.09 #> 4                   0.60 #> 5                   2.72 summary(df3, unit = \"day\")  #>             start_date          time                    n #> 1 First participant in Days accruing Participants accrued #> 2            08Jul2020            93                  250 #>                     rate #> 1 Accrual rate (per day) #> 2                   2.69 summary(df3, unit = \"day\", header = FALSE)  #>   start_date time   n rate #> 1  08Jul2020   93 250 2.69"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lukas Bütikofer. Maintainer, author. Alan G. Haynes. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bütikofer L, Haynes (2024). accrualPlot: Accrual Plots Predictions Clinical Trials. R package version 1.0.9, https://ctu-bern.github.io/accrualPlot/, https://github.com/CTU-Bern/accrualPlot.","code":"@Manual{,   title = {accrualPlot: Accrual Plots and Predictions for Clinical Trials},   author = {Lukas Bütikofer and Alan G. Haynes},   year = {2024},   note = {R package version 1.0.9, https://ctu-bern.github.io/accrualPlot/},   url = {https://github.com/CTU-Bern/accrualPlot}, }"},{"path":"/index.html","id":"accrualplot-","dir":"","previous_headings":"","what":"Accrual Plots and Predictions for Clinical Trials","title":"Accrual Plots and Predictions for Clinical Trials","text":"Accrual plots important tool monitoring clinical trials. trials terminated early due low accrual, waste resources (including time). Assessing accrual rates can also useful planning analyses estimating long trial needs continue recruiting participants. accrualPlot provides tools plots","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Accrual Plots and Predictions for Clinical Trials","text":"accrualPlot can installed CRAN usual manner: development version package can installed CTU Bern universe via accrualPlot can installed directly github : Note remotes treats warnings (e.g. certain package built different version R) errors. see error, run following line try :","code":"install.packages('accrualPlot') install.packages('accrualPlot', repos = c('https://ctu-bern.r-universe.dev', 'https://cloud.r-project.org')) # install.packages(\"remotes\") remotes::install_github(\"CTU-Bern/accrualPlot\") Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS = \"true\")"},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Accrual Plots and Predictions for Clinical Trials","text":"first step using accrualPlot create accrual dataframe. simply dataframe counts participants included per day. Cumulative absolute recruitment plots , well method predict time point study completion, included.","code":"# load package library(accrualPlot) #> Loading required package: lubridate #>  #> Attaching package: 'lubridate' #> The following objects are masked from 'package:base': #>  #>     date, intersect, setdiff, union  # demonstration data data(accrualdemo)  df <- accrual_create_df(accrualdemo$date) par(mfrow = c(1,3)) plot(df, which = \"cum\") plot(df, which = \"abs\") plot(df, which = \"pred\", target = 300)"},{"path":"/index.html","id":"acknowledgements","dir":"","previous_headings":"Overview","what":"Acknowledgements","title":"Accrual Plots and Predictions for Clinical Trials","text":"package logo created ggplot2 hexSticker icons Font Awesome (via emojifont package).","code":""},{"path":"/reference/accrual_create_df.html","id":null,"dir":"Reference","previous_headings":"","what":"accrual_create_df — accrual_create_df","title":"accrual_create_df — accrual_create_df","text":"Creates data frame list data frames contains absolute cumululative number participants recruited date vector enrollment dates. Used input accrual plot functions.","code":""},{"path":"/reference/accrual_create_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"accrual_create_df — accrual_create_df","text":"","code":"accrual_create_df(   enrollment_dates,   by = NA,   start_date = \"site\",   current_date = \"common\",   overall = TRUE,   name_overall = \"Overall\",   pos_overall = c(\"last\", \"first\"),   force_start0 = TRUE )"},{"path":"/reference/accrual_create_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"accrual_create_df — accrual_create_df","text":"enrollment_dates date vector one entry per participants. factor character vector sites, length enrollment dates. NA, list accrual data frame site generated. start_date date recruitment started. Single date (used sites ), named date vector (length names corresponding levels ), \"common\" (first date overall) \"site\" (first date site, default). current_date date data export database freeze. Single date, named date vector (length names corresponding levels ), \"common\" (last date overall, default) \"site\" (last date site). overall logical indicates accrual_df contains summary sites (NA). name_overall name summary sites (NA overall==TRUE). pos_overall overall last first element list (NA overall==TRUE). force_start0 logical, adds extra 0 line accrual data frame cases start date given corresponds earliest enrollment date.","code":""},{"path":"/reference/accrual_create_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"accrual_create_df — accrual_create_df","text":"Returns data frame class 'accrual_df' list class 'accrual_list' 'accrual_df' level (NA). 'accrual_df' contains row per accrual day following three columns: Date date accrual Freq absolute number accrued Date Cumulative cumulative number accrued Date","code":""},{"path":[]},{"path":"/reference/accrual_create_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"accrual_create_df — accrual_create_df","text":"","code":"# \\donttest{ data(accrualdemo) accrual_create_df(accrualdemo$date) #> 250 participants recruited between 2020-07-09 and 2020-10-09  #>         Date Freq Cumulative #> 1 2020-07-09    0          0 #> 2 2020-07-09    1          1 #> 3 2020-07-14    3          4 #> 4 2020-07-16    1          5 #> 5 2020-07-19    1          6 #> 6 2020-07-20    1          7 # different start and current date accrual_create_df(accrualdemo$date, start_date=as.Date(\"2020-07-08\"), current_date=as.Date(\"2020-10-15\")) #> 250 participants recruited between 2020-07-08 and 2020-10-15  #>         Date Freq Cumulative #> 1 2020-07-08    0          0 #> 2 2020-07-09    1          1 #> 3 2020-07-14    3          4 #> 4 2020-07-16    1          5 #> 5 2020-07-19    1          6 #> 6 2020-07-20    1          7  #by site accrual_create_df(accrualdemo$date,by=accrualdemo$site) #> Site 1: #> 141 participants recruited between 2020-07-09 and 2020-10-09  #>         Date Freq Cumulative #> 1 2020-07-09    0          0 #> 2 2020-07-09    1          1 #> 3 2020-07-14    3          4 #> 4 2020-07-16    1          5 #> 5 2020-07-19    1          6 #> 6 2020-07-21    1          7 #>  #> Site 2: #> 88 participants recruited between 2020-07-20 and 2020-10-09  #>         Date Freq Cumulative #> 1 2020-07-20    0          0 #> 2 2020-07-20    1          1 #> 3 2020-07-21    1          2 #> 4 2020-07-22    1          3 #> 5 2020-07-23    1          4 #> 6 2020-07-26    1          5 #>  #> Site 3: #> 21 participants recruited between 2020-09-04 and 2020-10-09  #>         Date Freq Cumulative #> 1 2020-09-04    0          0 #> 2 2020-09-04    1          1 #> 3 2020-09-05    1          2 #> 4 2020-09-07    2          4 #> 5 2020-09-12    1          5 #> 6 2020-09-13    1          6 #>  #> Overall: #> 250 participants recruited between 2020-07-09 and 2020-10-09  #>         Date Freq Cumulative #> 1 2020-07-09    0          0 #> 2 2020-07-09    1          1 #> 3 2020-07-14    3          4 #> 4 2020-07-16    1          5 #> 5 2020-07-19    1          6 #> 6 2020-07-20    1          7 #>  # }"},{"path":"/reference/accrual_linear_model.html","id":null,"dir":"Reference","previous_headings":"","what":"accrual_linear_model — accrual_linear_model","title":"accrual_linear_model — accrual_linear_model","text":"Creates weighted linear regression model using accrual data frame produced accrual_create_df.","code":""},{"path":"/reference/accrual_linear_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"accrual_linear_model — accrual_linear_model","text":"","code":"accrual_linear_model(   accrual_df,   fill_up = TRUE,   wfun = function(x) seq(1/nrow(x), 1, by = 1/nrow(x)) )"},{"path":"/reference/accrual_linear_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"accrual_linear_model — accrual_linear_model","text":"accrual_df object class 'accrual_df' 'accrual_list' produced accrual_create_df. fill_up whether fill days recruitment observed, wfun function calculate weights accrual data frame argument, default wfun<-function(x) seq(1 / nrow(x), 1, = 1/nrow(x)).","code":""},{"path":"/reference/accrual_linear_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"accrual_linear_model — accrual_linear_model","text":"Returns object class 'lm' weighted linear regression cumulative accrual dates.","code":""},{"path":"/reference/accrual_linear_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"accrual_linear_model — accrual_linear_model","text":"","code":"# \\donttest{ data(accrualdemo) accrual_df<-accrual_create_df(accrualdemo$date) accrual_linear_model(accrual_df) #>  #> Call: #> lm(formula = Cumulative ~ Date, data = accrual_dfi, weights = weivec) #>  #> Coefficients: #> (Intercept)         Date   #>  -65341.023        3.537   #>   #unweighted accrual_linear_model(accrual_df, wfun=function(x) rep(1,nrow(x))) #>  #> Call: #> lm(formula = Cumulative ~ Date, data = accrual_dfi, weights = weivec) #>  #> Coefficients: #> (Intercept)         Date   #>  -54614.315        2.957   #>   #different start and current date accrual_df<-accrual_create_df(accrualdemo$date,start_date=as.Date(\"2020-07-08\"),     current_date=as.Date(\"2020-07-15\")) #> Warning: Current date is before last recruitment and will not be used. accrual_linear_model(accrual_df) #>  #> Call: #> lm(formula = Cumulative ~ Date, data = accrual_dfi, weights = weivec) #>  #> Coefficients: #> (Intercept)         Date   #>  -64704.911        3.502   #>   #accrual_df with by option accrual_df<-accrual_create_df(accrualdemo$date,by=accrualdemo$site) accrual_linear_model(accrual_df) #> $`Site 1` #>  #> Call: #> lm(formula = Cumulative ~ Date, data = accrual_dfi, weights = weivec) #>  #> Coefficients: #> (Intercept)         Date   #>  -36055.515        1.952   #>  #>  #> $`Site 2` #>  #> Call: #> lm(formula = Cumulative ~ Date, data = accrual_dfi, weights = weivec) #>  #> Coefficients: #> (Intercept)         Date   #>  -23799.342        1.288   #>  #>  #> $`Site 3` #>  #> Call: #> lm(formula = Cumulative ~ Date, data = accrual_dfi, weights = weivec) #>  #> Coefficients: #> (Intercept)         Date   #>  -1.082e+04    5.845e-01   #>  #>  #> $Overall #>  #> Call: #> lm(formula = Cumulative ~ Date, data = accrual_dfi, weights = weivec) #>  #> Coefficients: #> (Intercept)         Date   #>  -65341.023        3.537   #>  #>  # }"},{"path":"/reference/accrual_plot_abs.html","id":null,"dir":"Reference","previous_headings":"","what":"Absolute accrual plots — accrual_plot_abs","title":"Absolute accrual plots — accrual_plot_abs","text":"Plot absolute recruitment time unit using accrual data frame produced accrual_create_df.","code":""},{"path":"/reference/accrual_plot_abs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Absolute accrual plots — accrual_plot_abs","text":"","code":"accrual_plot_abs(   accrual_df,   unit = c(\"month\", \"year\", \"week\", \"day\"),   target = NULL,   overall = TRUE,   name_overall = attr(accrual_df, \"name_overall\"),   ylim = NULL,   xlim = NULL,   ylab = \"Recruited patients\",   xlabformat = NULL,   xlabsel = NA,   xlabpos = NULL,   xlabsrt = 45,   xlabadj = c(1, 1),   xlabcex = 1,   col = NULL,   legend.list = NULL,   ... )  gg_accrual_plot_abs(   accrual_df,   unit = c(\"month\", \"year\", \"week\", \"day\"),   xlabformat = NULL )"},{"path":"/reference/accrual_plot_abs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Absolute accrual plots — accrual_plot_abs","text":"accrual_df object class 'accrual_df' 'accrual_list' produced accrual_create_df. unit time unit bars plotted, one \"month\", \"year\", \"week\" \"day\". target adds horizontal line target recruitment per time unit. overall logical, indicates accrual_df contains summary sites removed stacked barplot (NA). name_overall name summary sites (NA overall==TRUE). ylim limits y-axis. xlim limits x-axis. ylab y-axis label. xlabformat format date x-axis. xlabsel selection x-labels shown, default shown 15 bars, automated selection done, either NA (default), NULL (show ), numeric vector. xlabpos position x-label. xlabsrt rotation x-axis labels degrees. xlabadj adjustment x-label, numeric vector length 1 2 different adjustment x- y-direction. xlabcex size x-axis label. col colors bars barplot, can vector accrual_df list, default grayscale. legend.list named list options passed legend(). ... arguments passed barplot() axis().","code":""},{"path":"/reference/accrual_plot_abs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Absolute accrual plots — accrual_plot_abs","text":"accrual_plot_abs returns barplot absolute accrual time unit (stacked accrual_df list). ggplot object","code":""},{"path":"/reference/accrual_plot_abs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Absolute accrual plots — accrual_plot_abs","text":"accrual_df includes multiple sites, dataframe passed ggplot includes site variable can used facetting","code":""},{"path":"/reference/accrual_plot_abs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Absolute accrual plots — accrual_plot_abs","text":"","code":"set.seed(2020) enrollment_dates <- as.Date(\"2018-01-01\") + sort(sample(1:100, 50, replace=TRUE)) accrual_df<-accrual_create_df(enrollment_dates) accrual_plot_abs(accrual_df,unit=\"week\")   #time unit accrual_plot_abs(accrual_df,unit=\"day\")   #include target accrual_plot_abs(accrual_df,unit=\"week\",target=5)   #further plot options accrual_plot_abs(accrual_df,unit=\"week\",ylab=\"No of recruited patients\",    xlabformat=\"%Y-%m-%d\",xlabsrt=30,xlabpos=-0.8,xlabadj=c(1,0.5),    col=\"pink\",tck=-0.03,mgp=c(3,1.2,0))   #accrual_df with by option set.seed(2020) centers<-sample(c(\"Site 1\",\"Site 2\",\"Site 3\"),length(enrollment_dates),replace=TRUE) centers<-factor(centers,levels=c(\"Site 1\",\"Site 2\",\"Site 3\")) accrual_df<-accrual_create_df(enrollment_dates,by=centers) accrual_plot_abs(accrual_df=accrual_df,unit=c(\"week\"))   ### ggplot2 approach data(accrualdemo) accrual_df<-accrual_create_df(accrualdemo$date) gg_accrual_plot_abs(accrual_df, unit = \"week\")  gg_accrual_plot_abs(accrual_df, unit = \"week\") +   ggplot2::theme_classic()   #time unit gg_accrual_plot_abs(accrual_df, unit = \"day\")   #accrual_df with by option accrual_df <- accrual_create_df(accrualdemo$date, by = accrualdemo$site) gg_accrual_plot_abs(accrual_df = accrual_df, unit = \"week\")  gg_accrual_plot_abs(accrual_df = accrual_df, unit = \"week\") +   ggplot2::scale_fill_discrete(type = c(\"black\", \"red\", \"blue\", \"green\"))"},{"path":"/reference/accrual_plot_cum.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative accrual plots — accrual_plot_cum","title":"Cumulative accrual plots — accrual_plot_cum","text":"Plot cumulative recruitment using accrual data frame produced accrual_create_df.","code":""},{"path":"/reference/accrual_plot_cum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative accrual plots — accrual_plot_cum","text":"","code":"accrual_plot_cum(   accrual_df,   ylim = NA,   xlim = NA,   ylab = \"Recruited patients\",   xlabn = 5,   xlabminn = xlabn%/%2,   xlabformat = \"%d%b%Y\",   xlabpos = NA,   xlabsrt = 45,   xlabadj = c(1, 1),   xlabcex = 1,   col = rep(1:8, 5),   lty = rep(1:5, each = 8),   legend.list = NULL,   ... )  gg_accrual_plot_cum(accrual_df, xlabformat = \"%d%b%Y\")"},{"path":"/reference/accrual_plot_cum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative accrual plots — accrual_plot_cum","text":"accrual_df object class 'accrual_df' 'accrual_list' produced accrual_create_df. ylim limits y-axis. xlim limits x-axis. ylab y-axis label. xlabn integer giving desired number intervals xlabel, default=5. xlabminn negative integer giving minimal number intervals. xlabformat format date x-axis. xlabpos position x-label. xlabsrt rotation x-axis labels degrees. xlabadj adjustment x-label, numeric vector length 1 2 different adjustment x- y-direction. xlabcex size x-axis label. col color line(s) plot lty line type(s) plot legend.list named list options passed legend(). ... options passed plot() axis().","code":""},{"path":"/reference/accrual_plot_cum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative accrual plots — accrual_plot_cum","text":"accrual_plot_cum returns plot cumulative accrual (per site accrual_df list). ggplot2 object","code":""},{"path":"/reference/accrual_plot_cum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cumulative accrual plots — accrual_plot_cum","text":"accrual_df includes multiple sites, dataframe passed ggplot includes site variable can used faceting","code":""},{"path":"/reference/accrual_plot_cum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative accrual plots — accrual_plot_cum","text":"","code":"set.seed(2020) enrollment_dates <- as.Date(\"2018-01-01\") + sort(sample(1:30, 50, replace=TRUE)) accrual_df<-accrual_create_df(enrollment_dates) accrual_plot_cum(accrual_df)  accrual_plot_cum(accrual_df,cex.lab=1.2,cex.axis=1.1,xlabcex=1.1)   #several sites set.seed(1) centers<-sample(c(\"Site 1\",\"Site 2\",\"Site 3\"),length(enrollment_dates),replace=TRUE) accrual_df<-accrual_create_df(enrollment_dates,by=centers) accrual_plot_cum(accrual_df)   #assuming a common start and current date accrual_df<-accrual_create_df(enrollment_dates,by=centers,start_date=\"common\",current_date=\"common\") accrual_plot_cum(accrual_df)   #plot and legend options accrual_plot_cum(accrual_df,col=c(\"red\",rep(1,3)),lty=c(1,1:3),cex.lab=1.2,cex.axis=1.1,xlabcex=1.1)  accrual_plot_cum(accrual_df,legend.list=list(ncol=2,bty=TRUE,cex=0.8))   #without overall accrual_df<-accrual_create_df(enrollment_dates,by=centers,overall=FALSE) accrual_plot_cum(accrual_df)   ### ggplot2 approach data(accrualdemo) accrual_df<-accrual_create_df(accrualdemo$date) gg_accrual_plot_cum(accrual_df)  gg_accrual_plot_cum(accrual_df) +   ggplot2::theme_classic()   #several sites accrual_df <- accrual_create_df(accrualdemo$date, by = accrualdemo$site) gg_accrual_plot_cum(accrual_df)   #assuming a common start and current date accrual_df <-   accrual_create_df(     accrualdemo$date,     by = accrualdemo$site,     start_date = \"common\",     current_date = \"common\"   ) gg_accrual_plot_cum(accrual_df)   #without overall accrual_df <-   accrual_create_df(accrualdemo$date, by = accrualdemo$site, overall = FALSE) gg_accrual_plot_cum(accrual_df)"},{"path":"/reference/accrual_plot_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Accrual prediction plots — accrual_plot_predict","title":"Accrual prediction plots — accrual_plot_predict","text":"Generates accrual prediction plot using accrual data frame produced accrual_create_df target sample size. Prediction based weighted linear regression. accrual data frame list (.e. using option accrual_create_df), center start dates given, number enrolled targeted sites included.","code":""},{"path":"/reference/accrual_plot_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accrual prediction plots — accrual_plot_predict","text":"","code":"accrual_plot_predict(   accrual_df,   target,   overall = TRUE,   name_overall = attr(accrual_df, \"name_overall\"),   fill_up = TRUE,   wfun = function(x) seq(1/nrow(x), 1, by = 1/nrow(x)),   col.obs = NULL,   lty.obs = 1,   col.pred = \"red\",   lty.pred = 2,   pch.pred = 8,   pos_prediction = c(\"out\", \"in\", \"none\"),   label_prediction = NULL,   cex_prediction = 1,   format_prediction = \"%B %d, %Y\",   show_center = TRUE,   design = 1,   center_label = \"Centers\",   center_legend = c(\"number\", \"strip\"),   targetc = NA,   center_colors = NULL,   center_legend_text_size = 0.7,   ylim = NA,   xlim = NA,   ylab = \"Recruited patients\",   xlabformat = \"%d%b%Y\",   xlabn = 5,   xlabminn = xlabn%/%2,   xlabpos = NA,   xlabsrt = 45,   xlabadj = c(1, 1),   xlabcex = 1,   mar = NA,   legend.list = NULL,   ...,   center_start_dates = NULL )  gg_accrual_plot_predict(   accrual_df,   target,   overall = TRUE,   name_overall = attr(accrual_df, \"name_overall\"),   col.pred = \"red\",   lty.pred = 2,   pch.pred = 8,   fill_up = TRUE,   wfun = function(x) seq(1/nrow(x), 1, by = 1/nrow(x)),   pos_prediction = c(\"out\", \"in\", \"none\"),   label_prediction = NULL,   format_prediction = \"%B %d, %Y\",   xlabformat = \"%d%b%Y\" )"},{"path":"/reference/accrual_plot_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accrual prediction plots — accrual_plot_predict","text":"accrual_df object class 'accrual_df' 'accrual_list' produced accrual_create_df. target target sample size date predict end date expected sample size, respectively. single number date, named vector length accrual_df. latter, center-specific predictions shown. overall logical, indicates accrual_df contains summary sites (NA). name_overall name summary sites (NA overall==TRUE). fill_up whether fill days recruitment observed, otherwise points contribute regression. wfun function calculate weights accrual data frame argument, default wfun<-function(x) seq(1 / nrow(x), 1, = 1/nrow(x)). col.obs line color cumulative recruitment, can vector length accrual_df. lty.obs line type cumulative recruitment, can vector length accrual_df. col.pred line color prediction, can vector length accrual_df. lty.pred line color prediction, can vector length accrual_df. pch.pred point symbol end prediction, can vector length accrual_df. pos_prediction position text predicted end date sample size, either \"\", \"\" \"none\". label_prediction label predicted end date sample size. cex_prediction text size predicted end date sample size. format_prediction date format predicted end date (target sample size) show_center logical, whether center info shown (accrual_df list center_start_dates given). design design options center info 1 (default): plot, 2: within plot, top, 3: within plot, bottom. center_label label center info. center_legend either \"number\" plot numbers center strip \"strip\" add legend strip, requires specification center_colors. targetc target number centers, scale legend \"strip\". center_colors colors used strip centers, vector length targetc. center_legend_text_size size text center legend strip, function ylim limits y-axis. xlim limits x-axis. ylab y-axis label. xlabformat format date x-axis. xlabn integer giving desired number intervals xlabel, default=5. xlabminn integer giving minimal number intervals. xlabpos position x-label. xlabsrt rotation x-axis labels degrees. xlabadj adjustment x-label, numeric vector length 1 2 different adjustment x- y-direction. xlabcex size x-axis label. mar vector length 4 (bottom, left, top, right margins), overwrite default margins. legend.list named list options passed legend(), accrual data frame list. ... options passed plot() axis(). center_start_dates alternative way add center info, vector dates centers enrolled.","code":""},{"path":"/reference/accrual_plot_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accrual prediction plots — accrual_plot_predict","text":"accrual_plot_predict returns plot accrual prediction. ggplot object","code":""},{"path":"/reference/accrual_plot_predict.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accrual prediction plots — accrual_plot_predict","text":"accrual_df includes multiple sites, dataframe passed ggplot includes site variable can used facetting","code":""},{"path":"/reference/accrual_plot_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accrual prediction plots — accrual_plot_predict","text":"","code":"data(accrualdemo) accrual_df<-accrual_create_df(accrualdemo$date) ##Predict end date accrual_plot_predict(accrual_df=accrual_df,target=300)  ##Predict sample size accrual_plot_predict(accrual_df=accrual_df,as.Date(\"2020-11-01\"))   #Include site accrual_df<-accrual_create_df(accrualdemo$date,by=accrualdemo$site) accrual_plot_predict(accrual_df=accrual_df,target=300,center_label=\"Site\")  ## with strip and target accrual_plot_predict(accrual_df=accrual_df,target=300,center_label=\"Site\",  targetc=5,center_colors=heat.colors(5),center_legend=\"strip\")   #Design for site accrual_plot_predict(accrual_df=accrual_df,target=300,design=2)   #Format prediction end date accrual_plot_predict(accrual_df=accrual_df,target=300,      pos_prediction=\"in\",label_prediction=\"End of accrual: \",cex_prediction=1.2,      format_prediction=\"%Y-%m-%d\",ylim=c(0,150))   #Format plot accrual_plot_predict(accrual_df=accrual_df,target=300,      ylab=\"No of recruited patients\",ylim=c(0,150),      xlabcex=1.2,xlabsrt=30,xlabn=5,xlabmin=5,      mgp=c(3,0.5,0),cex.lab=1.2,cex.axis=1.2)   #predictions for all sites accrual_plot_predict(accrual_df=accrual_df, target=c(\"Site 1\"=160,\"Site 2\"=100,\"Site 3\"=40,\"Overall\"=300))  ## different colors accrual_plot_predict(accrual_df=accrual_df, target=c(\"Site 1\"=160,\"Site 2\"=100,\"Site 3\"=40,\"Overall\"=300), col.obs=topo.colors(length(accrual_df)))  ##not showing center info accrual_plot_predict(accrual_df=accrual_df, target=c(\"Site 1\"=160,\"Site 2\"=100,\"Site 3\"=40,\"Overall\"=300), show_center=FALSE)   #predictions of sample size for all sites target<-rep(as.Date(\"2020-11-01\"),4) names(target)<-c(\"Site 1\",\"Site 2\",\"Site 3\",\"Overall\") accrual_plot_predict(accrual_df=accrual_df,target=target,col.obs=topo.colors(length(accrual_df)))  ### ggplot2 approach data(accrualdemo) accrual_df<-accrual_create_df(accrualdemo$date) gg_accrual_plot_predict(accrual_df = accrual_df, target = 300) #> Warning: All aesthetics have length 1, but the data has 79 rows. #> ℹ Please consider using `annotate()` or provide this layer with data containing #>   a single row.  gg_accrual_plot_predict(accrual_df = accrual_df, target = 300) +   ggplot2::theme_classic() #> Warning: All aesthetics have length 1, but the data has 79 rows. #> ℹ Please consider using `annotate()` or provide this layer with data containing #>   a single row.   #Include site accrual_df<-accrual_create_df(accrualdemo$date, by=accrualdemo$site) gg_accrual_plot_predict(accrual_df=accrual_df, target=300) #> Warning: All aesthetics have length 1, but the data has 67 rows. #> ℹ Please consider using `annotate()` or provide this layer with data containing #>   a single row.    #Format prediction end date gg_accrual_plot_predict(accrual_df = accrual_df, target=300, pos_prediction=\"in\", format_prediction=\"%Y-%m-%d\") #> Warning: All aesthetics have length 1, but the data has 67 rows. #> ℹ Please consider using `annotate()` or provide this layer with data containing #>   a single row.    #predictions for all sites gg_accrual_plot_predict(accrual_df = accrual_df, target=c(\"Site 1\"=160,\"Site 2\"=100,\"Site 3\"=40,\"Overall\"=300))  gg_accrual_plot_predict(accrual_df = accrual_df,  target=c(\"Site 1\"=160,\"Site 2\"=100,\"Site 3\"=40,\"Overall\"=300)) +   ggplot2::theme(legend.position = c(0.15,.9)) +   ggplot2::labs(col = \"Site\") #> Warning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2 #> 3.5.0. #> ℹ Please use the `legend.position.inside` argument of `theme()` instead."},{"path":"/reference/accrual_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"accrual_predict — accrual_predict","title":"accrual_predict — accrual_predict","text":"accrual_predict","code":""},{"path":"/reference/accrual_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"accrual_predict — accrual_predict","text":"","code":"accrual_predict(accrual_df, accrual_fit, target)"},{"path":"/reference/accrual_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"accrual_predict — accrual_predict","text":"accrual_df accrual data frame produced accrual_create_df (optionally option list) accrual_fit linear model produced accrual_linear_model, can list length accrual_df target target sample size date predict end date expected sample size, respectively. single number date, named vector length accrual_df (add site-specific targets).","code":""},{"path":"/reference/accrual_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"accrual_predict — accrual_predict","text":"Returns predicted end date(s) predicted sample size(s).","code":""},{"path":"/reference/accrual_predict.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"accrual_predict — accrual_predict","text":"Prediction end date based accrual data frame produced accrual_create_df, fitted regression model produced accrual_linear_model target sample size.","code":""},{"path":"/reference/accrual_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"accrual_predict — accrual_predict","text":"","code":"# \\donttest{ data(accrualdemo) accrual_df<-accrual_create_df(accrualdemo$date) accrual_model<-accrual_linear_model(accrual_df) #predict date for a specific n accrual_predict(accrual_df,accrual_model,target=300) #> [1] \"2020-10-24\" #predict n at a specific date accrual_predict(accrual_df,accrual_model,target=as.Date(\"2020-11-01\")) #> [1] 331.3405  #different start and current date accrual_df<-accrual_create_df(accrualdemo$date,start_date=as.Date(\"2020-07-09\"),     current_date=as.Date(\"2020-10-15\")) accrual_model<-accrual_linear_model(accrual_df) accrual_predict(accrual_df,accrual_model,target=300) #> [1] \"2020-10-30\"   #accrual_df with by option  accrual_df<-accrual_create_df(accrualdemo$date,by=accrualdemo$site) accrual_model<-accrual_linear_model(accrual_df) accrual_predict(accrual_df,accrual_model,   target=c(\"Site 1\"=160,\"Site 2\"=100,\"Site 3\"=40,\"Overall\"=300)) #> $`Site 1` #>       Site 1  #> \"2020-10-19\"  #>  #> $`Site 2` #>       Site 2  #> \"2020-10-19\"  #>  #> $`Site 3` #>       Site 3  #> \"2020-11-11\"  #>  #> $Overall #>      Overall  #> \"2020-10-24\"  #>  accrual_predict(accrual_df,accrual_model,target=as.Date(\"2020-11-01\")) #> $`Site 1` #> [1] 185.8957 #>  #> $`Site 2` #> [1] 117.6193 #>  #> $`Site 3` #> [1] 34.44371 #>  #> $Overall #> [1] 331.3405 #>  # }"},{"path":"/reference/accrual_table.html","id":null,"dir":"Reference","previous_headings":"","what":"accrual_table — accrual_table","title":"accrual_table — accrual_table","text":"Table recruitment overview site, rate recruitment","code":""},{"path":"/reference/accrual_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"accrual_table — accrual_table","text":"","code":"accrual_table(   accrual_df,   overall = TRUE,   name_overall = \"Overall\",   pos_overall = c(\"last\", \"first\"),   unit = c(\"month\", \"year\", \"week\", \"day\"),   format_table_date = \"%d%b%Y\",   format_time = \"%1.0f\",   format_rrate = \"%1.2f\",   header = TRUE )"},{"path":"/reference/accrual_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"accrual_table — accrual_table","text":"accrual_df object class 'accrual_df' 'accrual_list' produced accrual_create_df. overall logical, indicates accrual_df contains summary sites (NA). name_overall name summary sites (NA overall==TRUE). pos_overall overall last first row (NA overall==TRUE). unit time unit time recruiting rate, one \"month\", \"year\", \"week\" \"day\". format_table_date format start date table. format_time format time recruiting table. format_rrate format recruitment rate table. header include header, logical character vector length 4 5 (accrual_df list).","code":""},{"path":"/reference/accrual_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"accrual_table — accrual_table","text":"Returns data frame header, row per site overall following columns: name name site (accrual_df list) start_date accrual start date time time accruing n number patients accrued rate accrual rate per time unit","code":""},{"path":"/reference/accrual_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"accrual_table — accrual_table","text":"","code":"data(accrualdemo) accrual_df<-accrual_create_df(accrualdemo$date,by=accrualdemo$site) accrual_table(accrual_df) #>      name           start_date            time                    n #> 1  Center First participant in Months accruing Participants accrued #> 2  Site 1            09Jul2020               3                  141 #> 3  Site 2            20Jul2020               3                   88 #> 4  Site 3            04Sep2020               1                   21 #> 5 Overall            09Jul2020               3                  250 #>                       rate #> 1 Accrual rate (per month) #> 2                    45.98 #> 3                    32.59 #> 4                    18.00 #> 5                    81.52  #format accrual_table(accrual_df,format_time=\"%1.1f\",format_rrate=\"%1.1f\") #>      name           start_date            time                    n #> 1  Center First participant in Months accruing Participants accrued #> 2  Site 1            09Jul2020             3.1                  141 #> 3  Site 2            20Jul2020             2.7                   88 #> 4  Site 3            04Sep2020             1.2                   21 #> 5 Overall            09Jul2020             3.1                  250 #>                       rate #> 1 Accrual rate (per month) #> 2                     46.0 #> 3                     32.6 #> 4                     18.0 #> 5                     81.5  #unit accrual_table(accrual_df,unit=\"day\") #>      name           start_date          time                    n #> 1  Center First participant in Days accruing Participants accrued #> 2  Site 1            09Jul2020            92                  141 #> 3  Site 2            20Jul2020            81                   88 #> 4  Site 3            04Sep2020            35                   21 #> 5 Overall            09Jul2020            92                  250 #>                     rate #> 1 Accrual rate (per day) #> 2                   1.53 #> 3                   1.09 #> 4                   0.60 #> 5                   2.72  #common start and current dates accrual_df<-accrual_create_df(accrualdemo$date,by=accrualdemo$site,start_date=\"common\", current_date=\"common\") accrual_table(accrual_df) #>      name           start_date            time                    n #> 1  Center First participant in Months accruing Participants accrued #> 2  Site 1            09Jul2020               3                  141 #> 3  Site 2            09Jul2020               3                   88 #> 4  Site 3            09Jul2020               3                   21 #> 5 Overall            09Jul2020               3                  250 #>                       rate #> 1 Accrual rate (per month) #> 2                    45.98 #> 3                    28.70 #> 4                     6.85 #> 5                    81.52 accrual_df<-accrual_create_df(accrualdemo$date,by=accrualdemo$site,start_date=as.Date(\"2020-07-09\"),     current_date=as.Date(\"2020-10-15\")) accrual_table(accrual_df) #>      name           start_date            time                    n #> 1  Center First participant in Months accruing Participants accrued #> 2  Site 1            09Jul2020               3                  141 #> 3  Site 2            09Jul2020               3                   88 #> 4  Site 3            09Jul2020               3                   21 #> 5 Overall            09Jul2020               3                  250 #>                       rate #> 1 Accrual rate (per month) #> 2                    43.16 #> 3                    26.94 #> 4                     6.43 #> 5                    76.53"},{"path":"/reference/accrual_time_unit.html","id":null,"dir":"Reference","previous_headings":"","what":"accrual_time_unit — accrual_time_unit","title":"accrual_time_unit — accrual_time_unit","text":"Generates summary recruitment per time unit","code":""},{"path":"/reference/accrual_time_unit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"accrual_time_unit — accrual_time_unit","text":"","code":"accrual_time_unit(accrual_df, unit = c(\"month\", \"year\", \"week\", \"day\"))"},{"path":"/reference/accrual_time_unit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"accrual_time_unit — accrual_time_unit","text":"accrual_df accrual data frame produced accrual_create_df =NA. unit time unit bars plotted, one \"month\", \"year\", \"week\" \"day\".","code":""},{"path":"/reference/accrual_time_unit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"accrual_time_unit — accrual_time_unit","text":"Returns data frame number patients accrued time unit.","code":""},{"path":"/reference/accrual_time_unit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"accrual_time_unit — accrual_time_unit","text":"","code":"# \\donttest{ data(accrualdemo) accrual_df<-accrual_create_df(accrualdemo$date) accrual_time_unit(accrual_df,\"week\") #>    week       date Freq #> 1     1 2020-07-06    1 #> 2     2 2020-07-13    5 #> 3     3 2020-07-20   10 #> 4     4 2020-07-27    9 #> 5     5 2020-08-03   12 #> 6     6 2020-08-10   13 #> 7     7 2020-08-17   14 #> 8     8 2020-08-24   24 #> 9     9 2020-08-31   22 #> 10   10 2020-09-07   24 #> 11   11 2020-09-14   36 #> 12   12 2020-09-21   33 #> 13   13 2020-09-28   33 #> 14   14 2020-10-05    3 accrual_time_unit(accrual_df,\"day\") #>    day month year Freq       date #> 1    9     7 2020    1 2020-07-09 #> 80  10     7 2020    0 2020-07-10 #> 81  11     7 2020    0 2020-07-11 #> 82  12     7 2020    0 2020-07-12 #> 79  13     7 2020    0 2020-07-13 #> 2   14     7 2020    3 2020-07-14 #> 85  15     7 2020    0 2020-07-15 #> 3   16     7 2020    1 2020-07-16 #> 83  17     7 2020    0 2020-07-17 #> 88  18     7 2020    0 2020-07-18 #> 4   19     7 2020    1 2020-07-19 #> 5   20     7 2020    1 2020-07-20 #> 6   21     7 2020    2 2020-07-21 #> 7   22     7 2020    1 2020-07-22 #> 8   23     7 2020    4 2020-07-23 #> 90  24     7 2020    0 2020-07-24 #> 9   25     7 2020    1 2020-07-25 #> 10  26     7 2020    1 2020-07-26 #> 11  27     7 2020    2 2020-07-27 #> 93  28     7 2020    0 2020-07-28 #> 86  29     7 2020    0 2020-07-29 #> 12  30     7 2020    1 2020-07-30 #> 13  31     7 2020    3 2020-07-31 #> 89   1     8 2020    0 2020-08-01 #> 14   2     8 2020    3 2020-08-02 #> 15   3     8 2020    2 2020-08-03 #> 16   4     8 2020    5 2020-08-04 #> 17   5     8 2020    2 2020-08-05 #> 18   6     8 2020    1 2020-08-06 #> 87   7     8 2020    0 2020-08-07 #> 19   8     8 2020    2 2020-08-08 #> 84   9     8 2020    0 2020-08-09 #> 20  10     8 2020    2 2020-08-10 #> 21  11     8 2020    1 2020-08-11 #> 22  12     8 2020    1 2020-08-12 #> 23  13     8 2020    2 2020-08-13 #> 24  14     8 2020    3 2020-08-14 #> 25  15     8 2020    1 2020-08-15 #> 26  16     8 2020    3 2020-08-16 #> 27  17     8 2020    4 2020-08-17 #> 92  18     8 2020    0 2020-08-18 #> 91  19     8 2020    0 2020-08-19 #> 28  20     8 2020    3 2020-08-20 #> 29  21     8 2020    1 2020-08-21 #> 30  22     8 2020    3 2020-08-22 #> 31  23     8 2020    3 2020-08-23 #> 32  24     8 2020    1 2020-08-24 #> 33  25     8 2020    4 2020-08-25 #> 34  26     8 2020    4 2020-08-26 #> 35  27     8 2020    2 2020-08-27 #> 36  28     8 2020    4 2020-08-28 #> 37  29     8 2020    6 2020-08-29 #> 38  30     8 2020    3 2020-08-30 #> 39  31     8 2020    3 2020-08-31 #> 40   1     9 2020    5 2020-09-01 #> 41   2     9 2020    2 2020-09-02 #> 42   3     9 2020    4 2020-09-03 #> 43   4     9 2020    2 2020-09-04 #> 44   5     9 2020    3 2020-09-05 #> 45   6     9 2020    3 2020-09-06 #> 46   7     9 2020    5 2020-09-07 #> 47   8     9 2020    3 2020-09-08 #> 48   9     9 2020    2 2020-09-09 #> 49  10     9 2020    2 2020-09-10 #> 50  11     9 2020    2 2020-09-11 #> 51  12     9 2020    6 2020-09-12 #> 52  13     9 2020    4 2020-09-13 #> 53  14     9 2020    6 2020-09-14 #> 54  15     9 2020    2 2020-09-15 #> 55  16     9 2020    8 2020-09-16 #> 56  17     9 2020    6 2020-09-17 #> 57  18     9 2020    4 2020-09-18 #> 58  19     9 2020    6 2020-09-19 #> 59  20     9 2020    4 2020-09-20 #> 60  21     9 2020    2 2020-09-21 #> 61  22     9 2020    6 2020-09-22 #> 62  23     9 2020    4 2020-09-23 #> 63  24     9 2020    4 2020-09-24 #> 64  25     9 2020    6 2020-09-25 #> 65  26     9 2020    5 2020-09-26 #> 66  27     9 2020    6 2020-09-27 #> 67  28     9 2020    7 2020-09-28 #> 68  29     9 2020    2 2020-09-29 #> 69  30     9 2020    4 2020-09-30 #> 70   1    10 2020    4 2020-10-01 #> 71   2    10 2020    9 2020-10-02 #> 72   3    10 2020    3 2020-10-03 #> 73   4    10 2020    4 2020-10-04 #> 74   5    10 2020    3 2020-10-05 #> 75   6    10 2020    2 2020-10-06 #> 76   7    10 2020    6 2020-10-07 #> 77   8    10 2020    1 2020-10-08 #> 78   9    10 2020    2 2020-10-09 # }"},{"path":"/reference/accrualdemo.html","id":null,"dir":"Reference","previous_headings":"","what":"Demonstration data set — accrualdemo","title":"Demonstration data set — accrualdemo","text":"Simulated recruitment data three sites. row represents one participant. Sites one two started 2020-07-01, site three 2020-09-01.","code":""},{"path":"/reference/accrualdemo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demonstration data set — accrualdemo","text":"","code":"accrualdemo"},{"path":"/reference/accrualdemo.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Demonstration data set — accrualdemo","text":"data frame two variables: date, site.","code":""},{"path":"/reference/as.data.frame.accrual_list.html","id":null,"dir":"Reference","previous_headings":"","what":"as.data.frame method for accural_list objects — as.data.frame.accrual_list","title":"as.data.frame method for accural_list objects — as.data.frame.accrual_list","text":".data.frame method accural_list objects","code":""},{"path":"/reference/as.data.frame.accrual_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"as.data.frame method for accural_list objects — as.data.frame.accrual_list","text":"","code":"# S3 method for class 'accrual_list' as.data.frame(x, ...)"},{"path":"/reference/as.data.frame.accrual_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"as.data.frame method for accural_list objects — as.data.frame.accrual_list","text":"x accrual_list ... consistency .data.frame methods (used)","code":""},{"path":"/reference/as.data.frame.accrual_list.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"as.data.frame method for accural_list objects — as.data.frame.accrual_list","text":"methods within package work output function.","code":""},{"path":"/reference/as.data.frame.accrual_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"as.data.frame method for accural_list objects — as.data.frame.accrual_list","text":"","code":"data(accrualdemo) x <- accrual_create_df(accrualdemo$date, accrualdemo$site) as.data.frame(x) #>           Date Freq Cumulative    site #> 1   2020-07-09    0          0  Site 1 #> 2   2020-07-09    1          1  Site 1 #> 3   2020-07-14    3          4  Site 1 #> 4   2020-07-16    1          5  Site 1 #> 5   2020-07-19    1          6  Site 1 #> 6   2020-07-21    1          7  Site 1 #> 7   2020-07-23    3         10  Site 1 #> 8   2020-07-25    1         11  Site 1 #> 9   2020-07-27    2         13  Site 1 #> 10  2020-07-31    1         14  Site 1 #> 11  2020-08-02    2         16  Site 1 #> 12  2020-08-04    3         19  Site 1 #> 13  2020-08-05    2         21  Site 1 #> 14  2020-08-06    1         22  Site 1 #> 15  2020-08-10    2         24  Site 1 #> 16  2020-08-11    1         25  Site 1 #> 17  2020-08-13    2         27  Site 1 #> 18  2020-08-14    3         30  Site 1 #> 19  2020-08-15    1         31  Site 1 #> 20  2020-08-16    2         33  Site 1 #> 21  2020-08-17    4         37  Site 1 #> 22  2020-08-20    3         40  Site 1 #> 23  2020-08-21    1         41  Site 1 #> 24  2020-08-22    2         43  Site 1 #> 25  2020-08-23    2         45  Site 1 #> 26  2020-08-24    1         46  Site 1 #> 27  2020-08-25    3         49  Site 1 #> 28  2020-08-26    4         53  Site 1 #> 29  2020-08-28    4         57  Site 1 #> 30  2020-08-29    5         62  Site 1 #> 31  2020-08-30    3         65  Site 1 #> 32  2020-08-31    1         66  Site 1 #> 33  2020-09-01    3         69  Site 1 #> 34  2020-09-02    2         71  Site 1 #> 35  2020-09-03    3         74  Site 1 #> 36  2020-09-04    1         75  Site 1 #> 37  2020-09-06    1         76  Site 1 #> 38  2020-09-07    2         78  Site 1 #> 39  2020-09-08    3         81  Site 1 #> 40  2020-09-09    1         82  Site 1 #> 41  2020-09-10    1         83  Site 1 #> 42  2020-09-11    1         84  Site 1 #> 43  2020-09-12    2         86  Site 1 #> 44  2020-09-13    2         88  Site 1 #> 45  2020-09-14    3         91  Site 1 #> 46  2020-09-16    4         95  Site 1 #> 47  2020-09-17    3         98  Site 1 #> 48  2020-09-19    1         99  Site 1 #> 49  2020-09-20    3        102  Site 1 #> 50  2020-09-22    3        105  Site 1 #> 51  2020-09-23    2        107  Site 1 #> 52  2020-09-24    3        110  Site 1 #> 53  2020-09-25    5        115  Site 1 #> 54  2020-09-26    3        118  Site 1 #> 55  2020-09-27    2        120  Site 1 #> 56  2020-09-28    4        124  Site 1 #> 57  2020-09-29    1        125  Site 1 #> 58  2020-09-30    1        126  Site 1 #> 59  2020-10-01    2        128  Site 1 #> 60  2020-10-02    4        132  Site 1 #> 61  2020-10-03    2        134  Site 1 #> 62  2020-10-04    2        136  Site 1 #> 63  2020-10-05    2        138  Site 1 #> 64  2020-10-06    1        139  Site 1 #> 65  2020-10-07    1        140  Site 1 #> 66  2020-10-08    1        141  Site 1 #> 67  2020-10-09    0        141  Site 1 #> 68  2020-07-20    0          0  Site 2 #> 69  2020-07-20    1          1  Site 2 #> 70  2020-07-21    1          2  Site 2 #> 71  2020-07-22    1          3  Site 2 #> 72  2020-07-23    1          4  Site 2 #> 73  2020-07-26    1          5  Site 2 #> 74  2020-07-30    1          6  Site 2 #> 75  2020-07-31    2          8  Site 2 #> 76  2020-08-02    1          9  Site 2 #> 77  2020-08-03    2         11  Site 2 #> 78  2020-08-04    2         13  Site 2 #> 79  2020-08-08    2         15  Site 2 #> 80  2020-08-12    1         16  Site 2 #> 81  2020-08-16    1         17  Site 2 #> 82  2020-08-22    1         18  Site 2 #> 83  2020-08-23    1         19  Site 2 #> 84  2020-08-25    1         20  Site 2 #> 85  2020-08-27    2         22  Site 2 #> 86  2020-08-29    1         23  Site 2 #> 87  2020-08-31    2         25  Site 2 #> 88  2020-09-01    2         27  Site 2 #> 89  2020-09-03    1         28  Site 2 #> 90  2020-09-05    2         30  Site 2 #> 91  2020-09-06    2         32  Site 2 #> 92  2020-09-07    1         33  Site 2 #> 93  2020-09-09    1         34  Site 2 #> 94  2020-09-10    1         35  Site 2 #> 95  2020-09-11    1         36  Site 2 #> 96  2020-09-12    3         39  Site 2 #> 97  2020-09-13    1         40  Site 2 #> 98  2020-09-14    1         41  Site 2 #> 99  2020-09-15    2         43  Site 2 #> 100 2020-09-16    4         47  Site 2 #> 101 2020-09-17    3         50  Site 2 #> 102 2020-09-18    2         52  Site 2 #> 103 2020-09-19    4         56  Site 2 #> 104 2020-09-20    1         57  Site 2 #> 105 2020-09-21    1         58  Site 2 #> 106 2020-09-22    3         61  Site 2 #> 107 2020-09-24    1         62  Site 2 #> 108 2020-09-26    1         63  Site 2 #> 109 2020-09-27    3         66  Site 2 #> 110 2020-09-28    3         69  Site 2 #> 111 2020-09-29    1         70  Site 2 #> 112 2020-09-30    2         72  Site 2 #> 113 2020-10-01    2         74  Site 2 #> 114 2020-10-02    4         78  Site 2 #> 115 2020-10-03    1         79  Site 2 #> 116 2020-10-04    1         80  Site 2 #> 117 2020-10-05    1         81  Site 2 #> 118 2020-10-07    5         86  Site 2 #> 119 2020-10-09    2         88  Site 2 #> 120 2020-09-04    0          0  Site 3 #> 121 2020-09-04    1          1  Site 3 #> 122 2020-09-05    1          2  Site 3 #> 123 2020-09-07    2          4  Site 3 #> 124 2020-09-12    1          5  Site 3 #> 125 2020-09-13    1          6  Site 3 #> 126 2020-09-14    2          8  Site 3 #> 127 2020-09-18    2         10  Site 3 #> 128 2020-09-19    1         11  Site 3 #> 129 2020-09-21    1         12  Site 3 #> 130 2020-09-23    2         14  Site 3 #> 131 2020-09-25    1         15  Site 3 #> 132 2020-09-26    1         16  Site 3 #> 133 2020-09-27    1         17  Site 3 #> 134 2020-09-30    1         18  Site 3 #> 135 2020-10-02    1         19  Site 3 #> 136 2020-10-04    1         20  Site 3 #> 137 2020-10-06    1         21  Site 3 #> 138 2020-10-09    0         21  Site 3 #> 139 2020-07-09    0          0 Overall #> 140 2020-07-09    1          1 Overall #> 141 2020-07-14    3          4 Overall #> 142 2020-07-16    1          5 Overall #> 143 2020-07-19    1          6 Overall #> 144 2020-07-20    1          7 Overall #> 145 2020-07-21    2          9 Overall #> 146 2020-07-22    1         10 Overall #> 147 2020-07-23    4         14 Overall #> 148 2020-07-25    1         15 Overall #> 149 2020-07-26    1         16 Overall #> 150 2020-07-27    2         18 Overall #> 151 2020-07-30    1         19 Overall #> 152 2020-07-31    3         22 Overall #> 153 2020-08-02    3         25 Overall #> 154 2020-08-03    2         27 Overall #> 155 2020-08-04    5         32 Overall #> 156 2020-08-05    2         34 Overall #> 157 2020-08-06    1         35 Overall #> 158 2020-08-08    2         37 Overall #> 159 2020-08-10    2         39 Overall #> 160 2020-08-11    1         40 Overall #> 161 2020-08-12    1         41 Overall #> 162 2020-08-13    2         43 Overall #> 163 2020-08-14    3         46 Overall #> 164 2020-08-15    1         47 Overall #> 165 2020-08-16    3         50 Overall #> 166 2020-08-17    4         54 Overall #> 167 2020-08-20    3         57 Overall #> 168 2020-08-21    1         58 Overall #> 169 2020-08-22    3         61 Overall #> 170 2020-08-23    3         64 Overall #> 171 2020-08-24    1         65 Overall #> 172 2020-08-25    4         69 Overall #> 173 2020-08-26    4         73 Overall #> 174 2020-08-27    2         75 Overall #> 175 2020-08-28    4         79 Overall #> 176 2020-08-29    6         85 Overall #> 177 2020-08-30    3         88 Overall #> 178 2020-08-31    3         91 Overall #> 179 2020-09-01    5         96 Overall #> 180 2020-09-02    2         98 Overall #> 181 2020-09-03    4        102 Overall #> 182 2020-09-04    2        104 Overall #> 183 2020-09-05    3        107 Overall #> 184 2020-09-06    3        110 Overall #> 185 2020-09-07    5        115 Overall #> 186 2020-09-08    3        118 Overall #> 187 2020-09-09    2        120 Overall #> 188 2020-09-10    2        122 Overall #> 189 2020-09-11    2        124 Overall #> 190 2020-09-12    6        130 Overall #> 191 2020-09-13    4        134 Overall #> 192 2020-09-14    6        140 Overall #> 193 2020-09-15    2        142 Overall #> 194 2020-09-16    8        150 Overall #> 195 2020-09-17    6        156 Overall #> 196 2020-09-18    4        160 Overall #> 197 2020-09-19    6        166 Overall #> 198 2020-09-20    4        170 Overall #> 199 2020-09-21    2        172 Overall #> 200 2020-09-22    6        178 Overall #> 201 2020-09-23    4        182 Overall #> 202 2020-09-24    4        186 Overall #> 203 2020-09-25    6        192 Overall #> 204 2020-09-26    5        197 Overall #> 205 2020-09-27    6        203 Overall #> 206 2020-09-28    7        210 Overall #> 207 2020-09-29    2        212 Overall #> 208 2020-09-30    4        216 Overall #> 209 2020-10-01    4        220 Overall #> 210 2020-10-02    9        229 Overall #> 211 2020-10-03    3        232 Overall #> 212 2020-10-04    4        236 Overall #> 213 2020-10-05    3        239 Overall #> 214 2020-10-06    2        241 Overall #> 215 2020-10-07    6        247 Overall #> 216 2020-10-08    1        248 Overall #> 217 2020-10-09    2        250 Overall"},{"path":"/reference/plot.accrual_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for accrual data frames produced by accrual_create_df — plot.accrual_df","title":"Plot method for accrual data frames produced by accrual_create_df — plot.accrual_df","text":"Plot method accrual data frames produced accrual_create_df","code":""},{"path":"/reference/plot.accrual_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for accrual data frames produced by accrual_create_df — plot.accrual_df","text":"","code":"# S3 method for class 'accrual_df' plot(x, which = \"cum\", engine = c(\"base\", \"ggplot2\"), ...)"},{"path":"/reference/plot.accrual_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for accrual data frames produced by accrual_create_df — plot.accrual_df","text":"x object class 'accrual_df' 'accrual_list' produced accrual_create_df. one \"cumulative\", \"absolute\" \"predict\". Abbreviations allowed. engine string indicate plotting engine (base/graphics ggplot2) ... options passed functions","code":""},{"path":"/reference/plot.accrual_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot method for accrual data frames produced by accrual_create_df — plot.accrual_df","text":"plot cumulative absolute accrual, accrual prediction.","code":""},{"path":[]},{"path":"/reference/plot.accrual_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot method for accrual data frames produced by accrual_create_df — plot.accrual_df","text":"","code":"data(accrualdemo) accrual_df <- accrual_create_df(accrualdemo$date) plot(accrual_df)  plot(accrual_df, \"abs\", unit=\"week\")  plot(accrual_df, \"pred\", target = 300)  plot(accrual_df, \"pred\", target = 300, engine = \"ggplot\") #> Warning: All aesthetics have length 1, but the data has 79 rows. #> ℹ Please consider using `annotate()` or provide this layer with data containing #>   a single row."},{"path":"/reference/print.accrual_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Print methods for accrual objects — print.accrual_df","title":"Print methods for accrual objects — print.accrual_df","text":"Print methods accrual objects","code":""},{"path":"/reference/print.accrual_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print methods for accrual objects — print.accrual_df","text":"","code":"# S3 method for class 'accrual_df' print(x, head = TRUE, ...)  # S3 method for class 'accrual_list' print(x, ...)"},{"path":"/reference/print.accrual_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print methods for accrual objects — print.accrual_df","text":"x object class 'accrual_df' 'accrual_list' produced accrual_create_df. head show header accrual data? ... arguments passed head","code":""},{"path":"/reference/print.accrual_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print methods for accrual objects — print.accrual_df","text":"return value","code":""},{"path":"/reference/print.accrual_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print methods for accrual objects — print.accrual_df","text":"","code":"data(accrualdemo) accrual_df<-accrual_create_df(accrualdemo$date) print(accrual_df) #> 250 participants recruited between 2020-07-09 and 2020-10-09  #>         Date Freq Cumulative #> 1 2020-07-09    0          0 #> 2 2020-07-09    1          1 #> 3 2020-07-14    3          4 #> 4 2020-07-16    1          5 #> 5 2020-07-19    1          6 #> 6 2020-07-20    1          7 # only show text print(accrual_df, head = FALSE) #> 250 participants recruited between 2020-07-09 and 2020-10-09  # show first 15 days print(accrual_df, n = 15) #> 250 participants recruited between 2020-07-09 and 2020-10-09  #>          Date Freq Cumulative #> 1  2020-07-09    0          0 #> 2  2020-07-09    1          1 #> 3  2020-07-14    3          4 #> 4  2020-07-16    1          5 #> 5  2020-07-19    1          6 #> 6  2020-07-20    1          7 #> 7  2020-07-21    2          9 #> 8  2020-07-22    1         10 #> 9  2020-07-23    4         14 #> 10 2020-07-25    1         15 #> 11 2020-07-26    1         16 #> 12 2020-07-27    2         18 #> 13 2020-07-30    1         19 #> 14 2020-07-31    3         22 #> 15 2020-08-02    3         25"},{"path":"/reference/summary.accrual_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for accrual_dfs (as created by accrual_create_df) — summary.accrual_df","title":"Summary method for accrual_dfs (as created by accrual_create_df) — summary.accrual_df","text":"Summary method accrual_dfs (created accrual_create_df)","code":""},{"path":"/reference/summary.accrual_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for accrual_dfs (as created by accrual_create_df) — summary.accrual_df","text":"","code":"# S3 method for class 'accrual_df' summary(object, ...)"},{"path":"/reference/summary.accrual_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for accrual_dfs (as created by accrual_create_df) — summary.accrual_df","text":"object object class 'accrual_df' 'accrual_list' produced accrual_create_df. ... options passed functions","code":""},{"path":"/reference/summary.accrual_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for accrual_dfs (as created by accrual_create_df) — summary.accrual_df","text":"Returns data frame header, row per site overall following columns: name name site (accrual_df list) start_date accrual start date time time accruing n number patients accrued rate accrual rate per time unit","code":""},{"path":"/reference/summary.accrual_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary method for accrual_dfs (as created by accrual_create_df) — summary.accrual_df","text":"","code":"data(accrualdemo) accrual_df<-accrual_create_df(accrualdemo$date, accrualdemo$site) summary(accrual_df) #>      name           start_date            time                    n #> 1  Center First participant in Months accruing Participants accrued #> 2  Site 1            09Jul2020               3                  141 #> 3  Site 2            20Jul2020               3                   88 #> 4  Site 3            04Sep2020               1                   21 #> 5 Overall            09Jul2020               3                  250 #>                       rate #> 1 Accrual rate (per month) #> 2                    45.98 #> 3                    32.59 #> 4                    18.00 #> 5                    81.52"},{"path":"/news/index.html","id":"accrualplot-109","dir":"Changelog","previous_headings":"","what":"accrualPlot 1.0.9","title":"accrualPlot 1.0.9","text":"accrual_create_df: warning refers NULL object accrual_create_df: fix typo documentation (last instead first date) test-accrual_plots: named vector target","code":""},{"path":"/news/index.html","id":"accrualplot-108","dir":"Changelog","previous_headings":"","what":"accrualPlot 1.0.8","title":"accrualPlot 1.0.8","text":"bug fix gg_accrual_plot_predict accrual_df contains one site overall","code":""},{"path":"/news/index.html","id":"accrualplot-107","dir":"Changelog","previous_headings":"","what":"accrualPlot 1.0.7","title":"accrualPlot 1.0.7","text":"CRAN release: 2022-08-16 prediction sample size specific date","code":""},{"path":"/news/index.html","id":"accrualplot-106","dir":"Changelog","previous_headings":"","what":"accrualPlot 1.0.6","title":"accrualPlot 1.0.6","text":"allow empty sites (specified factor)","code":""},{"path":"/news/index.html","id":"accrualplot-105","dir":"Changelog","previous_headings":"","what":"accrualPlot 1.0.5","title":"accrualPlot 1.0.5","text":"new .data.frame method accrual_list objects","code":""},{"path":"/news/index.html","id":"accrualplot-104","dir":"Changelog","previous_headings":"","what":"accrualPlot 1.0.4","title":"accrualPlot 1.0.4","text":"bug fix accrual_plot_abs (stacking bars) fix vignette help files","code":""},{"path":"/news/index.html","id":"accrualplot-103","dir":"Changelog","previous_headings":"","what":"accrualPlot 1.0.3","title":"accrualPlot 1.0.3","text":"add demo dataset accrualdemo","code":""},{"path":"/news/index.html","id":"accrualplot-102","dir":"Changelog","previous_headings":"","what":"accrualPlot 1.0.2","title":"accrualPlot 1.0.2","text":"named vector target, default plot size vignette","code":""},{"path":"/news/index.html","id":"accrualplot-101","dir":"Changelog","previous_headings":"","what":"accrualPlot 1.0.1","title":"accrualPlot 1.0.1","text":"CRAN release: 2022-05-09 Fix par setting accrual_plots Reinstate old par end vignette","code":""},{"path":"/news/index.html","id":"accrualplot-100","dir":"Changelog","previous_headings":"","what":"accrualPlot 1.0.0","title":"accrualPlot 1.0.0","text":"Clean help files Add names header print method","code":""},{"path":"/news/index.html","id":"accrualplot-068","dir":"Changelog","previous_headings":"","what":"accrualPlot 0.6.8","title":"accrualPlot 0.6.8","text":"Update vignette Small changes accrual_plot_predict (size legend) gg_accrual_plot_abs (name x-axis title)","code":""},{"path":"/news/index.html","id":"accrualplot-067","dir":"Changelog","previous_headings":"","what":"accrualPlot 0.6.7","title":"accrualPlot 0.6.7","text":"Remove LazyDate description","code":""},{"path":"/news/index.html","id":"accrualplot-066","dir":"Changelog","previous_headings":"","what":"accrualPlot 0.6.6","title":"accrualPlot 0.6.6","text":"gg_accrual_plot_abs: site factor legend order sites accrual_df_list","code":""},{"path":"/news/index.html","id":"accrualplot-065","dir":"Changelog","previous_headings":"","what":"accrualPlot 0.6.5","title":"accrualPlot 0.6.5","text":"accrual_create_df: named vector start_date current_date","code":""},{"path":"/news/index.html","id":"accrualplot-064","dir":"Changelog","previous_headings":"","what":"accrualPlot 0.6.4","title":"accrualPlot 0.6.4","text":"accrual_time_unit: use weeks form start (last Monday) instead calender weeks","code":""},{"path":"/news/index.html","id":"accrualplot-063","dir":"Changelog","previous_headings":"","what":"accrualPlot 0.6.3","title":"accrualPlot 0.6.3","text":"accrual_table: correct typo weeks summary: longer prints table","code":""},{"path":"/news/index.html","id":"accrualplot-062","dir":"Changelog","previous_headings":"","what":"accrualPlot 0.6.2","title":"accrualPlot 0.6.2","text":"accrual_table: remove options start end date accrual_table: include 0-entries accrual_df calculation accrual time","code":""},{"path":"/news/index.html","id":"accrualplot-061","dir":"Changelog","previous_headings":"","what":"accrualPlot 0.6.1","title":"accrualPlot 0.6.1","text":"accrual_plot_predict: remove 0 center strip","code":""},{"path":"/news/index.html","id":"accrualplot-060","dir":"Changelog","previous_headings":"","what":"accrualPlot 0.6.0","title":"accrualPlot 0.6.0","text":"addition names_overall attribute accrual_df objects new accrual_list class accrual_dfs multiple sites new ggplot methods comparable base graphics capabilities new print methods accrual_dfs accrual_lists vignette updated include info (appropriate)","code":""},{"path":"/news/index.html","id":"accrualplot-053","dir":"Changelog","previous_headings":"","what":"accrualPlot 0.5.3","title":"accrualPlot 0.5.3","text":"accrual_df class applied dataframes used (allows methods work subelements list , e.g. plot(list[[1]])) tests added accrual_create_df, accrual_plot_cum","code":""},{"path":"/news/index.html","id":"accrualplot-052","dir":"Changelog","previous_headings":"","what":"accrualPlot 0.5.2","title":"accrualPlot 0.5.2","text":"bug fix force_start0 accrual_create_df test accrual_predict","code":""},{"path":"/news/index.html","id":"accrualplot-051","dir":"Changelog","previous_headings":"","what":"accrualPlot 0.5.1","title":"accrualPlot 0.5.1","text":"helper function plotting center info accrual_plot_predict","code":""},{"path":"/news/index.html","id":"accrualplot-050","dir":"Changelog","previous_headings":"","what":"accrualPlot 0.5.0","title":"accrualPlot 0.5.0","text":"modifications accrual_plot_predict - longer allows input start end date - longer allows input enrollment dates - center info shown accrual_df list - separate predictions shown accrual_df list target vector length accrual_create_df allows add overall top bottom removal overall option accrual_plot_cum","code":""},{"path":"/news/index.html","id":"accrualplot-041","dir":"Changelog","previous_headings":"","what":"accrualPlot 0.4.1","title":"accrualPlot 0.4.1","text":"accrual_plot_cum longer allows input start end date","code":""},{"path":"/news/index.html","id":"accrualplot-040","dir":"Changelog","previous_headings":"","what":"accrualPlot 0.4.0","title":"accrualPlot 0.4.0","text":"accrual_plot_abs produces stacked barplots accrual_df list longer allows additional input start end dates longer produces several plots accrual_df list","code":""},{"path":"/news/index.html","id":"accrualplot-035","dir":"Changelog","previous_headings":"","what":"accrualPlot 0.3.5","title":"accrualPlot 0.3.5","text":"enrollment_date longer allowed include NA values","code":""},{"path":"/news/index.html","id":"accrualplot-034","dir":"Changelog","previous_headings":"","what":"accrualPlot 0.3.4","title":"accrualPlot 0.3.4","text":"adapt options start end dates accrual_create_df","code":""},{"path":"/news/index.html","id":"accrualplot-033","dir":"Changelog","previous_headings":"","what":"accrualPlot 0.3.3","title":"accrualPlot 0.3.3","text":"removal possibility pass dates strings >>>>>>> 0c51608820193f8d715acf93d90e88fd59caa751","code":""},{"path":"/news/index.html","id":"accrualplot-032","dir":"Changelog","previous_headings":"","what":"accrualPlot 0.3.2","title":"accrualPlot 0.3.2","text":"Adapt x-axis labeling accrual_plot_cum accrual_plot_predict","code":""},{"path":"/news/index.html","id":"accrualplot-031","dir":"Changelog","previous_headings":"","what":"accrualPlot 0.3.1","title":"accrualPlot 0.3.1","text":"bug fix accrual_plot_abs","code":""},{"path":"/news/index.html","id":"accrualplot-030","dir":"Changelog","previous_headings":"","what":"accrualPlot 0.3.0","title":"accrualPlot 0.3.0","text":"bug fix accrual_create_df factor plots list accrual data frames (accrual_create_df option)","code":""},{"path":"/news/index.html","id":"accrualplot-020","dir":"Changelog","previous_headings":"","what":"accrualPlot 0.2.0","title":"accrualPlot 0.2.0","text":"new summary plot methods can used instead accrual_plot_x","code":""},{"path":"/news/index.html","id":"accrualplot-011","dir":"Changelog","previous_headings":"","what":"accrualPlot 0.1.1","title":"accrualPlot 0.1.1","text":"accrual_table works without argument","code":""},{"path":"/news/index.html","id":"accrualplot-010","dir":"Changelog","previous_headings":"","what":"accrualPlot 0.1.0","title":"accrualPlot 0.1.0","text":"accrualPlot uploaded github","code":""}]
